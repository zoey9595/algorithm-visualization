{"version":3,"sources":["algorithms/mergesort.js","algorithms/quicksort.js","algorithms/bubblesort.js","algorithms/insertionsort.js","visualizer/visualizer.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","duplicateArray","slice","mergeSortAlgorithm","l","r","m","Math","floor","k","i","j","push","merge","getQuickSortAnimations","quickSortAlgorithm","Animation","left","right","swap","height","this","h","pivot","partition","temp","getBubbleSortAnimations","min","bubbleSortAlgorithm","getInsertionSortAnimations","insertionSortAlgorithm","PRIMARY_COLOR","SECONDARY_COLOR","Visualizer","props","state","size","speed","running","setArray","bind","regenerate","mergeSort","quickSort","bubbleSort","insertionSort","handleChange","display","max","random","setState","arrayBars","document","getElementsByClassName","style","backgroundColor","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","console","log","event","parseInt","target","value","className","onClick","type","onChange","map","idx","width","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.058cfd99.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const duplicateArray = array.slice();\n  mergeSortAlgorithm(array, duplicateArray, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction mergeSortAlgorithm(array, duplicateArray, l, r, animations) {\n  if (l === r) return;\n  const m = Math.floor((l + r) / 2);\n  mergeSortAlgorithm(duplicateArray, array, l, m, animations);\n  mergeSortAlgorithm(duplicateArray, array, m + 1, r, animations);\n  merge(array, duplicateArray, l, m, r, animations);\n}\n\nfunction merge(array, duplicateArray, l, m, r, animations) {\n  let k = l;\n  let i = l;\n  let j = m + 1;\n\n  while (i <= m && j <= r) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n\n    if (duplicateArray[i] <= duplicateArray[j]) {\n      animations.push([k, duplicateArray[i]]);\n      array[k++] = duplicateArray[i++];\n    } else {\n      animations.push([k, duplicateArray[j]]);\n      array[k++] = duplicateArray[j++];\n    }\n  }\n\n  while (i <= m) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, duplicateArray[i]]);\n    array[k++] = duplicateArray[i++];\n  }\n\n  while (j <= r) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, duplicateArray[j]]);\n    array[k++] = duplicateArray[j++];\n  }\n}\n","export function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  quickSortAlgorithm(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nclass Animation {\n  constructor(left, right, swap, height) {\n    this.left = left;\n    this.right = right;\n    this.swap = swap; // 0 means comparison; other value means change the index\n    this.height = height; // change the height\n  }\n}\n\nfunction quickSortAlgorithm(array, l, h, animations) {\n  if (l < h) {\n    let i = partition(array, l, h, animations);\n    quickSortAlgorithm(array, l, i - 1, animations);\n    quickSortAlgorithm(array, i + 1, h, animations);\n  }\n}\n\nfunction partition(array, l, h, animations) {\n  let i = l;\n  let j = h + 1;\n  let pivot = array[l];\n\n  while (true) {\n    while (array[++i] < pivot && i !== h) {\n      animations.push(new Animation(i, l, -1, 0));\n      animations.push(new Animation(i, l, -1, 0));\n    }\n    while (array[--j] > pivot && j !== l) {\n      animations.push(new Animation(j, l, -1, 0));\n      animations.push(new Animation(j, l, -1, 0));\n    }\n    if (i >= j) break;\n    animations.push(new Animation(i, j, j, array[i]));\n    animations.push(new Animation(i, j, i, array[j]));\n    swap(array, i, j);\n  }\n  animations.push(new Animation(l, j, l, array[j]));\n  animations.push(new Animation(l, j, j, array[l]));\n  swap(array, l, j);\n  return j;\n}\n\nfunction swap(array, i, j) {\n  let temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n","export function getBubbleSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  bubbleSortAlgorithm(array, animations);\n  return animations;\n}\n\nclass Animation {\n  constructor(left, right, swap, height) {\n    this.left = left;\n    this.right = right;\n    this.swap = swap; // 0 means comparison; other value means change the index\n    this.height = height; // change the height\n  }\n}\n\nfunction bubbleSortAlgorithm(array, animations) {\n  for (let i = 0; i < array.length - 1; i++) {\n    let min = i;\n    for (let j = i + 1; j < array.length; j++) {\n      animations.push(new Animation(min, j, -1, 0));\n      animations.push(new Animation(min, j, -1, 0));\n      if (array[j] < array[min]) {\n        min = j;\n      }\n    }\n    animations.push(new Animation(i, min, min, array[i]));\n    animations.push(new Animation(i, min, i, array[min]));\n    swap(array, i, min);\n  }\n}\n\nfunction swap(array, i, j) {\n  let temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n","export function getInsertionSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  insertionSortAlgorithm(array, animations);\n  return animations;\n}\n\nclass Animation {\n  constructor(left, right, swap, height) {\n    this.left = left;\n    this.right = right;\n    this.swap = swap; // 0 means comparison; other value means change the index\n    this.height = height; // change the height\n  }\n}\n\nfunction insertionSortAlgorithm(array, animations) {\n  for (let i = 1; i < array.length; i++) {\n    for (let j = i; j > 0; j--) {\n      animations.push(new Animation(j, j - 1, -1, 0));\n      animations.push(new Animation(j, j - 1, -1, 0));\n      if (array[j] < array[j - 1]) {\n        animations.push(new Animation(j, j - 1, j, array[j - 1]));\n        animations.push(new Animation(j, j - 1, j - 1, array[j]));\n        swap(array, j, j - 1);\n      }\n    }\n  }\n}\n\nfunction swap(array, i, j) {\n  let temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n","import React from \"react\";\n\nimport { getMergeSortAnimations } from \"../algorithms/mergesort\";\nimport { getQuickSortAnimations } from \"../algorithms/quicksort\";\nimport { getBubbleSortAnimations } from \"../algorithms/bubblesort\";\nimport { getInsertionSortAnimations } from \"../algorithms/insertionsort\";\n\nimport \"./visualizer.styles.scss\";\n\n// Number of bars in the array\nconst NUMBER_OF_BARS = 400;\n\n// This is the main color of the array bars.\nconst BACKGROUND_COLOR = \"lightblue\";\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = \"royalblue\";\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = \"orangered\";\n\nclass Visualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      size: 200,\n      speed: 4.5,\n      running: false,\n    };\n\n    this.setArray = this.setArray.bind(this);\n    this.regenerate = this.regenerate.bind(this);\n    this.mergeSort = this.mergeSort.bind(this);\n    this.quickSort = this.quickSort.bind(this);\n    this.bubbleSort = this.bubbleSort.bind(this);\n    this.insertionSort = this.insertionSort.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.display = this.display.bind(this);\n  }\n\n  componentDidMount() {\n    this.setArray();\n  }\n\n  setArray() {\n    const array = [];\n    for (let i = 0; i < this.state.size; i++) {\n      array.push(randomNumberGenerator(10, 400));\n    }\n    this.setState({ array });\n  }\n\n  regenerate() {\n    this.setArray();\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < this.state.size; i++) {\n      arrayBars[i].style.backgroundColor = BACKGROUND_COLOR;\n    }\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.state.speed);\n      }\n    }\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n    this.display(animations);\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n    this.display(animations);\n  }\n\n  insertionSort() {\n    const animations = getInsertionSortAnimations(this.state.array);\n    console.log(this.state.array);\n    this.display(animations);\n  }\n\n  display(animations) {\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isSwap = animations[i].swap === -1 ? false : true;\n      if (!isSwap) {\n        const barOneIdx = animations[i].left;\n        const barTwoIdx = animations[i].right;\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.speed);\n      } else {\n        setTimeout(() => {\n          const barOneIdx = animations[i].swap;\n          const newHeight = animations[i].height;\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n        }, i * this.state.speed);\n      }\n    }\n  }\n\n  async handleChange(event) {\n    await this.setState({ size: Math.floor(parseInt(event.target.value)) });\n    await this.setState({\n      speed: 1100 / Math.floor(parseInt(event.target.value)),\n    });\n    this.setArray();\n  }\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <div className=\"container\">\n        <div className=\"header\">\n          <button\n            className=\"custom-button random-button\"\n            onClick={this.regenerate}\n          >\n            random data generator\n          </button>\n          <button className=\"custom-button\" onClick={this.bubbleSort}>\n            bubble sort\n          </button>\n          <button className=\"custom-button\" onClick={this.quickSort}>\n            quick sort\n          </button>\n          <button className=\"custom-button\" onClick={this.insertionSort}>\n            insertion sort\n          </button>\n          <button className=\"custom-button\" onClick={this.mergeSort}>\n            merge sort\n          </button>\n          <div className=\"slider-container\">\n            <p className=\"slider-label\">Array Size & Speed</p>\n            <input\n              className=\"slider\"\n              type=\"range\"\n              min=\"6\"\n              max={NUMBER_OF_BARS}\n              value={this.state.size}\n              onChange={this.handleChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"bars-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                width: `${Math.floor(700 / this.state.size)}px`,\n                height: `${value}px`,\n              }}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction randomNumberGenerator(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default Visualizer;\n","import \"./App.css\";\n\nimport Visualizer from \"./visualizer/visualizer.component\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualizer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}